import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Calendar } from '@/components/ui/calendar';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import AddTaskDialog from '@/components/AddTaskDialog';
import { useToast } from '@/hooks/use-toast';

interface Task {
  id: string;
  title: string;
  category: 'work' | 'study' | 'home' | 'personal' | 'projects';
  priority: 'high' | 'medium' | 'low';
  completed: boolean;
  dueDate: string;
  mode: 'personal' | 'study';
}

const CalendarPage = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [date, setDate] = useState<Date | undefined>(new Date());
  const [addDialogOpen, setAddDialogOpen] = useState(false);

  const [tasks, setTasks] = useState<Task[]>([
    {
      id: '1',
      title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
      category: 'study',
      priority: 'high',
      completed: false,
      dueDate: '2025-10-14',
      mode: 'study'
    },
    {
      id: '2',
      title: '–ó–∞–∫–æ–Ω—á–∏—Ç—å UI –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞',
      category: 'projects',
      priority: 'high',
      completed: false,
      dueDate: '2025-10-15',
      mode: 'personal'
    },
    {
      id: '3',
      title: '–í—ã—É—á–∏—Ç—å 20 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤',
      category: 'study',
      priority: 'medium',
      completed: true,
      dueDate: '2025-10-13',
      mode: 'study'
    },
    {
      id: '4',
      title: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É',
      category: 'personal',
      priority: 'medium',
      completed: false,
      dueDate: '2025-10-16',
      mode: 'personal'
    },
    {
      id: '5',
      title: '–°–¥–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ —Ñ–∏–∑–∏–∫–µ',
      category: 'study',
      priority: 'high',
      completed: false,
      dueDate: '2025-10-14',
      mode: 'study'
    }
  ]);

  const handleAddTask = (newTask: {
    title: string;
    category: string;
    priority: string;
    dueDate: Date;
    description: string;
    mode: string;
  }) => {
    const task: Task = {
      id: Date.now().toString(),
      title: newTask.title,
      category: newTask.category as Task['category'],
      priority: newTask.priority as Task['priority'],
      completed: false,
      dueDate: newTask.dueDate.toISOString().split('T')[0],
      mode: newTask.mode as Task['mode']
    };
    setTasks([...tasks, task]);
    toast({
      title: '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! üéâ',
      description: `"${task.title}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ ${new Date(task.dueDate).toLocaleDateString('ru-RU')}`,
    });
  };

  const priorityConfig = {
    high: { label: '–í—ã—Å–æ–∫–∏–π', emoji: 'üî¥' },
    medium: { label: '–°—Ä–µ–¥–Ω–∏–π', emoji: 'üü°' },
    low: { label: '–ù–∏–∑–∫–∏–π', emoji: 'üü¢' }
  };

  const getTasksForDate = (date: Date) => {
    const dateStr = date.toISOString().split('T')[0];
    return tasks.filter(task => task.dueDate === dateStr);
  };

  const getWeekDates = () => {
    const today = new Date();
    const dates = [];
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      dates.push(date);
    }
    return dates;
  };

  const weekDates = getWeekDates();
  const selectedDateTasks = date ? getTasksForDate(date) : [];

  return (
    <div className="min-h-screen bg-background">
      <nav className="border-b bg-card sticky top-0 z-50 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-3 flex justify-between items-center">
          <div className="flex items-center gap-6">
            <button onClick={() => navigate('/')} className="flex items-center gap-2 hover:opacity-80 transition-opacity">
              <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
                <Icon name="CheckSquare" className="text-white" size={18} />
              </div>
              <span className="text-xl font-bold">TaskBuddy</span>
            </button>
            <div className="hidden md:flex gap-1">
              <Button variant="ghost" size="sm" onClick={() => navigate('/app')}>
                <Icon name="Home" className="mr-2" size={16} />
                –ì–ª–∞–≤–Ω–∞—è
              </Button>
              <Button variant="ghost" size="sm" onClick={() => navigate('/calendar')}>
                <Icon name="Calendar" className="mr-2" size={16} />
                –ö–∞–ª–µ–Ω–¥–∞—Ä—å
              </Button>
              <Button variant="ghost" size="sm" onClick={() => navigate('/settings')}>
                <Icon name="Settings" className="mr-2" size={16} />
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </div>
          </div>
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="icon" onClick={() => navigate('/notifications')}>
              <Icon name="Bell" size={18} />
            </Button>
            <Button variant="ghost" size="icon" onClick={() => navigate('/profile')}>
              <Icon name="User" size={18} />
            </Button>
          </div>
        </div>
      </nav>

      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2">–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á üìÖ</h1>
          <p className="text-muted-foreground">–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–µ–¥–ª–∞–π–Ω—ã</p>
        </div>

        <div className="grid lg:grid-cols-2 gap-6 mb-8">
          <Card>
            <CardHeader>
              <CardTitle>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</CardTitle>
              <CardDescription>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á</CardDescription>
            </CardHeader>
            <CardContent className="flex justify-center">
              <Calendar
                mode="single"
                selected={date}
                onSelect={setDate}
                className="rounded-md border"
              />
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>
                –ó–∞–¥–∞—á–∏ –Ω–∞ {date?.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' })}
              </CardTitle>
              <CardDescription>
                {selectedDateTasks.length === 0 ? '–ù–µ—Ç –∑–∞–¥–∞—á' : `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${selectedDateTasks.length}`}
              </CardDescription>
            </CardHeader>
            <CardContent>
              {selectedDateTasks.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  <Icon name="Calendar" size={48} className="mx-auto mb-4 opacity-50" />
                  <p>–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç—É –¥–∞—Ç—É</p>
                  <Button className="mt-4" size="sm" onClick={() => setAddDialogOpen(true)}>
                    <Icon name="Plus" className="mr-2" size={16} />
                    –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
                  </Button>
                </div>
              ) : (
                <div className="space-y-3">
                  {selectedDateTasks.map(task => (
                    <div key={task.id} className="p-4 border-2 rounded-lg hover:shadow-md transition-shadow">
                      <div className="flex items-start justify-between gap-3">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <span className="text-xl">{priorityConfig[task.priority].emoji}</span>
                            <h3 className={`font-medium ${task.completed ? 'line-through text-muted-foreground' : ''}`}>
                              {task.title}
                            </h3>
                          </div>
                          <div className="flex gap-2">
                            <Badge variant="secondary" className="text-xs">
                              {task.category}
                            </Badge>
                            {task.completed && (
                              <Badge variant="outline" className="text-xs bg-green-100 text-green-700">
                                –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                              </Badge>
                            )}
                          </div>
                        </div>
                        <Button variant="ghost" size="icon">
                          <Icon name="MoreVertical" size={16} />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é</CardTitle>
            <CardDescription>–û–±–∑–æ—Ä –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-7 gap-4">
              {weekDates.map((weekDate, index) => {
                const dayTasks = getTasksForDate(weekDate);
                const isToday = weekDate.toDateString() === new Date().toDateString();
                
                return (
                  <div
                    key={index}
                    className={`p-4 border-2 rounded-lg ${isToday ? 'border-primary bg-primary/5' : ''}`}
                  >
                    <div className="text-center mb-3">
                      <p className={`text-sm font-medium ${isToday ? 'text-primary' : 'text-muted-foreground'}`}>
                        {weekDate.toLocaleDateString('ru-RU', { weekday: 'short' })}
                      </p>
                      <p className={`text-2xl font-bold ${isToday ? 'text-primary' : ''}`}>
                        {weekDate.getDate()}
                      </p>
                    </div>
                    <div className="space-y-2">
                      {dayTasks.length === 0 ? (
                        <p className="text-xs text-center text-muted-foreground">–ù–µ—Ç –∑–∞–¥–∞—á</p>
                      ) : (
                        dayTasks.map(task => (
                          <div
                            key={task.id}
                            className="text-xs p-2 bg-muted rounded-md"
                          >
                            <div className="flex items-center gap-1">
                              <span>{priorityConfig[task.priority].emoji}</span>
                              <span className={`truncate ${task.completed ? 'line-through' : ''}`}>
                                {task.title}
                              </span>
                            </div>
                          </div>
                        ))
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      </div>

      <AddTaskDialog
        open={addDialogOpen}
        onOpenChange={setAddDialogOpen}
        onAddTask={handleAddTask}
        defaultMode="personal"
      />
    </div>
  );
};

export default CalendarPage;